public static string AddBinary(string a, string b)
{
    var aUpperBound = a.Length - 1;
    var bUpperBound = b.Length - 1;
    var div = Math.Abs(aUpperBound - bUpperBound);

    var newA = "";
    var newB = "";
    if (aUpperBound > bUpperBound)
    {
        for (int i = 0; i < div; i++)
        {
            newB += '0';
        }
    }
    else if (bUpperBound > aUpperBound)
    {
        for (int i = 0; i < div; i++)
        {
            newA += '0';
        }
    }
    newB += b;
    newA += a;

    aUpperBound = newA.Length - 1;
    bUpperBound = newB.Length - 1;

    var holder = 0;
    string result = "";
    while(aUpperBound >= 0)
    {
        var i = newA[aUpperBound];
        var j = newB[bUpperBound];
        if (i == '0' && j == '0')
        {
            if (holder > 0)
            {
                result += '1';
                holder--;
            }
            else
            {
                result += '0';
            }
        }
        else if ((j == '1' && i == '0') || (j == '0' && i == '1'))
        {
            result += holder > 0 ? '0' : '1';
        }
        else if (j == '1' && i == '1')
        {
            if (holder > 0)
            {
                result += '1';
            }
            else
            {
                result += '0';
                holder++;
            }
        }

        aUpperBound--;
        bUpperBound--;
    }

    if (holder > 0)
    {
        result += '1';
    }

    return Reverse(result);
}

public static string Reverse(string s)
{
    char[] charArray = s.ToCharArray();
    Array.Reverse(charArray);
    return new string(charArray);
}
